id,name,prompt,test_suite,type,created_at,updated_at
1,One,"/*Write a function one() that returns the value 1.
Example usage:
one(1); => 1
one(2); => 1*/

var one = function (n) {
  
};","assert.equal(one(1),1);
assert.equal(one(2),1);",battle,2016-02-02 20:42:35.743-08,2016-02-02 20:42:35.743-08
2,fizzBuzz,"/*Write a function that accepts an integer input, n, and returns ""FIZZ"" when n is divisible by 3, ""BUZZ"" when n is divisible by 5, and ""FIZZBUZZ"" when n is divisible by both 5 and 3

Example usage:
fizzBuzz(1) => 1
fizzBuzz(15) => ""FIZZBUZZ""
fizzBuzz(20) => ""BUZZ"" */

var fizzBuzz = function (n) {
  
};","assert.equal(fizzBuzz(1), 1);
assert.equal(fizzBuzz(3), ""FIZZ"");
assert.equal(fizzBuzz(5), ""BUZZ"");
assert.equal(fizzBuzz(12), ""FIZZ"");
assert.equal(fizzBuzz(30), ""FIZZBUZZ"");
assert.equal(fizzBuzz(100), ""BUZZ"");
assert.equal(fizzBuzz(300000), ""FIZZBUZZ"");
assert.equal(fizzBuzz(123457), 123457);
assert.equal(fizzBuzz(14), 14);",battle,2016-02-02 20:42:35.743-08,2016-02-02 20:42:35.743-08
3,stringReverse,"/*Write a function that reverses a string, str

Example usage:
stringReverse(""Foo bar!"") => ""!rab ooF""
stringReverse(""Hello World"") => ""dlroW olleH""*/

var stringReverse = function (str) {
  
};","assert.equal(stringReverse(""hi""), ""ih"");
assert.equal(stringReverse(""a""), ""a"");
assert.equal(stringReverse(""Foo bar!""), ""!rab ooF"");
assert.equal(stringReverse(""1234""), ""4321"");
assert.equal(stringReverse(""stringReverse""), ""esreveRgnirts"");
assert.equal(stringReverse(""b b b""), ""b b b"");",battle,2016-02-02 20:42:35.743-08,2016-02-02 20:42:35.743-08
4,missingNumber,"/*Write a function that returns the missing number in an input array, arr.
The input array will always start at 0, and all following entries are 1 larger than the previous entry, except for the missing entry.

Example usage:
missingNumber([0,1,2,4,5,6]) => 3
missingNumber([1,2,3,4,5]) => 0
missingNumber([0,1,2,3,4,5]) => null*/

var missingNumber = function (arr) {
  
};","assert.equal(missingNumber([0,2]), 1);
assert.equal(missingNumber([0]), null);
assert.equal(missingNumber([1,2]), 0);
assert.equal(missingNumber([0,1,2,3,5]), 4);
assert.equal(missingNumber([0,1,3]), 2);
assert.equal(missingNumber([0,1,2,3]), null);
assert.equal(missingNumber([0,1,2,3,4]), null);
assert.equal(missingNumber([0,1,2,4]), 3);
assert.equal(missingNumber([0,1,2,3,4,5,6,8]), 7);",battle,2016-02-02 20:42:35.743-08,2016-02-02 20:42:35.743-08
5,nthFibonacci,"/*A Fibonacci sequence is a list of numbers that begins with 0 and 1, and each subsequent number is the sum of the previous two.

For example, the first five Fibonacci numbers are: 0 1 1 2 3
If n were 4, your function should return 3; for 5, it should return 5.

Write a function that accepts a number, n, and returns the nth Fibonacci number. Use a recursive solution to this problem; if you finish with time left over, implement an iterative solution.

Example usage:
nthFibonacci(2); => 1
nthFibonacci(3); => 2
nthFibonacci(4); => 3
etc...*/

var nthFibonacci = function (n) {
  
};","assert.equal(nthFibonacci(1), 1);
assert.equal(nthFibonacci(2), 1);
assert.equal(nthFibonacci(3), 2);
assert.equal(nthFibonacci(4), 3);
assert.equal(nthFibonacci(5), 5);
assert.equal(nthFibonacci(10), 55);
assert.equal(nthFibonacci(20), 6765);",battle,2016-02-02 20:42:35.743-08,2016-02-02 20:42:35.743-08
6,nthRowPascal,"/*A pascal triangle looks like this:
                 1
           1         1
       1        2         1
  1       3          3       1

It has the property that the following row starts and ends with 1's, and every middle entry is the sum of the two nearst entries from the row above.

Write a function that accepts an input number, n, and returns the nth row of a pascal triangle as an array. Assume non-negative integer inputs

Example usage:
nthRowPascal(0) => [1]
nthRowPascal(3) => [1, 3, 3, 1]*/

var nthRowPascal = function (n) {
  
};","assert.deepEqual(nthRowPascal(0), [1]);
assert.deepEqual(nthRowPascal(1), [1,1]);
assert.deepEqual(nthRowPascal(3), [1,3,3,1]);
assert.deepEqual(nthRowPascal(10), [1,10,45,120,210,252,210,120,45,10,1]);
",battle,2016-02-02 20:42:35.743-08,2016-02-02 20:42:35.743-08
7,stringSum,"/*Write a function that accepts an input string, str, and returns the numeric sum of each character. Assume only positive integers

Example usage:
stringSum(""12345"") => 15
stringSum(""82"") => 10
stringSum(""0101"") => 2*/

var stringSum = function (str) {
  
};","assert.equal(stringSum(""12345""), 15);
assert.equal(stringSum(""82""), 10);
assert.equal(stringSum(""010101""), 3);
assert.equal(stringSum(""0""), 0);
assert.equal(stringSum(""11111111111111111111""), 20);",battle,2016-02-02 20:42:35.743-08,2016-02-02 20:42:35.743-08
8,Two,"/*Write a function one() that returns the value 1.
Example usage:
two(1); => 2
two(2); => 2*/

var two = function (n) {
  
};","assert.equal(two(1),2);
assert.equal(two(2),2);",battle,2016-02-02 20:42:35.743-08,2016-02-02 20:42:35.743-08
9,isPrime,"/*Write a function that check to see if an input integer, n, is a prime number. Assume positive non-zero inputs

Example usage:
isPrime(2) => true
isPrime(17) => true
isPrime(100) => false*/

var isPrime = function (n) {
  
};","assert.equal(isPrime(2), true);
assert.equal(isPrime(113), true);
assert.equal(isPrime(163), true);
assert.equal(isPrime(1000000), false);
assert.equal(isPrime(23452), false);
assert.equal(isPrime(1234567654321), false);",battle,2016-02-02 20:42:35.743-08,2016-02-02 20:42:35.743-08
10,nthPrime,"/*Write a function that takes an input integer, n, and returns the nth prime number. Assume positive inputs

Example usage:
nthPrime(0) => 2
nthPrime(1) => 3
nthPrime(2) => 5*/

var nthPrime = function (n) {
  
};","assert.equal(nthPrime(0),2);
assert.equal(nthPrime(1),3);
assert.equal(nthPrime(2),5);
assert.equal(nthPrime(3),7);
assert.equal(nthPrime(4),11);
assert.equal(nthPrime(99),541);
assert.equal(nthPrime(999),7919);
assert.equal(nthPrime(344),2333);",battle,2016-02-02 20:42:35.743-08,2016-02-02 20:42:35.743-08
11,balancedParens,"/*Write a function that determines if an input string, str, has balanced parenthesis

Example usage:
balancedParens(""( ( ) )"") => true
balancedParens(""() (())"") => true
balancedParens(""((( ) ( )"") => false
balancedParens("")("") = > false*/

var balancedParens = function (str) {
  
};","assert.equal(balancedParens(""()()()()()()()""), true);
assert.equal(balancedParens(""( ().. (b)a )"" ), true);
assert.equal(balancedParens(""(()())((())())""), true);
assert.equal(balancedParens(""()aaa(""), false);
assert.equal(balancedParens(""sdjsf))((""), false);
assert.equal(balancedParens("")()()(""), false);
assert.equal(balancedParens(""((((((((""), false);
assert.equal(balancedParens(""(((((((((())))))))))""), true);",battle,2016-02-02 20:42:35.743-08,2016-02-02 20:42:35.743-08
12,maxProfit,"/*Write a function that accepts an array of integers, arr, representing a stockâ€™s price over time and returns the maximum achievable profit under the constraint that you must buy before you sell, and that you can buy and sell at most once. Assume input array only contains positive integers.

Example usage:
maxProfit([1]) => 0
maxProfit([10,9,8]) => 0
maxProfit([3,10,1,5]) => 7*/

var maxProfit = function (arr) {
  
};","assert.equal(maxProfit([10,9,8,7,6,5,4,3,2,1]), 0);
assert.equal(maxProfit([1,2,3,4,5,6,7,8,9,10]), 9);
assert.equal(maxProfit([1]), 0);
assert.equal(maxProfit([]), 0);
assert.equal(maxProfit([3,10,1,5]), 7);
assert.equal(maxProfit([7,4,7,8,0,1,3]), 4);
assert.equal(maxProfit([1,10,1,10]), 9);
assert.equal(maxProfit([1,100]), 99);",battle,2016-02-02 20:42:35.743-08,2016-02-02 20:42:35.743-08
13,Three,"/*Write a function three() that returns the value 3.
Example usage:
three(1); => 3
three(2); => 3*/

var three = function (n) {
  
};","assert.equal(three(1),3);
assert.equal(three(2),3);",battle,2016-02-02 20:42:35.743-08,2016-02-02 20:42:35.743-08
14,isPalindrome,"/*Write a function that determines if an input string, str, is a palindrome

Example usage:
isPalindrome(""racecar"") => true
isPalindrome(""peanut"") => false*/

var isPalindrome = function (str) {
  
};","assert.equal(isPalindrome(""hannah""), true);
assert.equal(isPalindrome(""racecar""), true);
assert.equal(isPalindrome(""a""), true);
assert.equal(isPalindrome(""""), true);
assert.equal(isPalindrome(""Hannah""), false);
assert.equal(isPalindrome(""hahaha""), false);
assert.equal(isPalindrome(""oh no""), false);",battle,2016-02-02 20:42:35.743-08,2016-02-02 20:42:35.743-08
15,Four,"/*Write a function four() that returns the value 4.
Example usage:
four(1); => 4
four(2); => 4*/

var four = function (n) {
  
};","assert.equal(four(1),4);
assert.equal(four(2),4);",battle,2016-02-02 20:42:35.743-08,2016-02-02 20:42:35.743-08
16,moveZeros,"/*Write a function that moves all zeros in an input array, arr, to the end of the array, while maintaining the relative order of the non-zero elements.
Move the numbers in-place without making a copy of the input array

Example usage:
var arr = [0, 1, 0, 3, 12];
moveZeros(arr);
arr => [1, 3, 12, 0, 0]*/

var moveZeros = function (arr) {
  
};","var arr = [0,1,0,3,12];
var arr2 = [0,0,1];
var arr3 = [1];
var arr4 = [1,1,0,4,0,3,0,2];
moveZeros(arr);
moveZeros(arr2);
moveZeros(arr3);
moveZeros(arr4);
assert.deepEqual(arr, [1,3,12,0,0]);
assert.deepEqual(arr2, [1,0,0]);
assert.deepEqual(arr3, [1]);
assert.deepEqual(arr4, [1,1,4,3,2,0,0,0]);",battle,2016-02-02 20:42:35.743-08,2016-02-02 20:42:35.743-08
17,colToNum,"/*Write a function that converts an input string, str, representing spreadsheet column headers to numbers like so:

colToNum(""A"") => 1
colToNum(""B"") => 2
colToNum(""AA"") => 27

Assume only uppercase letters in the input string. ""A"".charCodeAt(0) = 65
*/

var colToNum = function (str) {
  
};","assert.equal(colToNum(""A""),1);
assert.equal(colToNum(""Z""),26);
assert.equal(colToNum(""AA""), 27);
assert.equal(colToNum(""BC""), 55);
assert.equal(colToNum(""AAA""), 703);
assert.equal(colToNum(""ZAZ""), 17628);
assert.equal(colToNum(""BBBBB""), 950510);",battle,2016-02-02 20:42:35.743-08,2016-02-02 20:42:35.743-08
18,addDigits,"/*Write a function that takes an input integer and sums its digits until the sum is single digit

Example usage:
addDigital(38) => 2 ==> 3+8=11 ==> 1+1=2 ==> return 2*/

var addDigits = function (num) {
  
};","assert.equal(addDigits(38), 2);
assert.equal(addDigits(111), 3);
assert.equal(addDigits(803), 2);
assert.equal(addDigits(888), 6);
assert.equal(addDigits(0), 0);
assert.equal(addDigits(999), 9);",battle,2016-02-02 20:42:35.743-08,2016-02-02 20:42:35.743-08
19,compressString,"/*Write a function that compresses an input string, str, while maintaining order of appearance, into this form:

compressString(""banana"") => ""b1a3n2""
compressString(""mississippi"") => ""m1i4s4p2""*/

var compressString = function (str) {
  
};","assert.equal(compressString(""banana""), ""b1a3n2"");
assert.equal(compressString(""mississippi""), ""m1i4s4p2"");
assert.equal(compressString(""abc""), ""a1b1c1"");
assert.equal(compressString(""hey !""), ""h1e1y1 1!1"");
assert.equal(compressString(""Hannah""), ""H1a2n2h1"");
assert.equal(compressString(""hahnbi""), ""h2a1n1b1i1"");",battle,2016-02-02 20:42:35.743-08,2016-02-02 20:42:35.743-08
20,stepSum,"/*Write a function that returns number of possible ways to reach the top of a staircase containing n steps, given that you can take 1 or 2 steps per move.

Example usage:
stepSum(1) => 1
stepSum(4) => 5*/

var stepSum = function () {
  
};","assert.equal(stepSum(1),1);
assert.equal(stepSum(5),8);
assert.equal(stepSum(7),21);
assert.equal(stepSum(10),81);
assert.equal(stepSum(20),10946);",battle,2016-02-02 20:42:35.743-08,2016-02-02 20:42:35.743-08
21,findSingleNum,"/*Given an input array of integers, arr, in which every element appears twice, except for one element, which appears only once. Write a function that finds that element

Example usage:
findSingleSum([1,2,3,4,1,2,3]) => 4
findSingleSum([9,9,5,5,1]) => 1*/

var findSingleSum = function (arr) {
  
};","assert.equal(findSingleSum([1,2,3,4,3,2,1],4));
assert.equal(findSingleSum([2,2,3,3,9,9,1],1));
assert.equal(findSingleSum([2,2,3],3));
assert.equal(findSingleSum([9,8,7,6,7,9,6],8));
assert.equal(findSingleSum([1,0,0,5,1],5));
assert.equal(findSingleSum([1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1],10));",battle,2016-02-02 20:42:35.743-08,2016-02-02 20:42:35.743-08
22,romanNum,"/*Write a function that interprets roman numeral, str, into an integer, assuming that the input str in integer form will not be larger than 3999.
I = 1, V = 5, X = 10, L = 50, C = 100, D = 500, M = 1,000*/

var romanNum = function (str) {
  
};","assert.equal(romanNum(""LXXVII""),77);
assert.equal(romanNum(""III""),3);
assert.equal(romanNum(""VI""),6);
assert.equal(romanNum(""IV""),4);
assert.equal(romanNum(""IX""),9);
assert.equal(romanNum(""XLIII""),43);
assert.equal(romanNum(""MDCCC""),1800);
assert.equal(romanNum(""MDCCCXLIII""),1843);
assert.equal(romanNum(""MCMXCVI""),1996);",battle,2016-02-02 20:42:35.743-08,2016-02-02 20:42:35.743-08
23,isAnagram,"/*Write a function that given two input strings, str1 and st2, determins if str1 is an anagram of str2, ignoring spaces and capitalization

Example usage:
isAnagram(""Hi!"", ""!iH"") => true
isAnagram(""Hello"", ""hello"") => true*/

var isAnagram = function (str1, str2) {
  
};","assert.equal(isAnagram("""",""""),true);
assert.equal(isAnagram(""abc"",""bac""),true);
assert.equal(isAnagram(""Hi !"",""!ih""),true);
assert.equal(isAnagram(""Hello"",""hello""),true);
assert.equal(isAnagram(""Male chauvinism"",""Im such a vile man""),true);
assert.equal(isAnagram(""bat"",""cat""),false);",battle,2016-02-02 20:42:35.743-08,2016-02-02 20:42:35.743-08
